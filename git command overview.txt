1. **`git init`**: Initializes a new Git repository. This command creates a new **`.git`** directory in your project, enabling Git version control for it.
2. **`git clone [url]`**: Creates a copy of an existing repository from a URL. It's used to download and copy the repository to your local machine.
3. **`git add [file]`**: Adds files to the staging area. It's used to include the changes of specified files into the next commit.
4. **`git commit -m "[commit message]"`**: Saves your changes to the local repository. The **`m`** flag allows you to add a commit message inline.
5. **`git status`**: Displays the state of the working directory and staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git.
6. **`git push [remote] [branch]`**: Pushes the changes from your local repository to a remote repository. The **`[remote]`** is typically **`origin`**, and **`[branch]`** is the branch name.
7. **`git pull [remote]`**: Fetches and merges changes from the remote server to your working directory.
8. **`git branch`**: Lists all the branches in your repo. Add a branch name after the command to create a new branch.
9. **`git checkout [branch-name]`**: Switches to the specified branch and updates the working directory.
10. **`git merge [branch]`**: Merges the specified branch’s history into the current branch.
11. **`git diff`**: Shows the file differences which are not yet staged.
12. **`git reset [file]`**: Unstages the specified file, but it preserves the file contents.
13. **`git log`**: Displays the chronological commit history for the current branch.
14. **`git fetch [remote]`**: Downloads all changes from the remote, but doesn’t integrate any of these new commits into your working files.
15. **`git rm [file]`**: Deletes a file from your working directory and stages the deletion.
16. **`git stash`**: Temporarily stores all modified tracked files.
17. **`git stash pop`**: Restores the most recently stashed files.
18. **`git remote -v`**: Lists all the configured remotes.
19. **`git rebase [branch]`**: Applies your branch commits one by one on top of the specified branch.
20. **`git tag [tag-name]`**: Used to tag specific points in history as important, typically used for marking release points (e.g., **`v1.0.1`**).

*******************************************************************************************

1. **`git rebase -i HEAD~[number]`**: Interactive rebasing allows you to modify commits in a number of ways such as rewriting, squashing, and reordering commits. This is powerful for cleaning up your commit history before merging a feature branch.
2. **`git cherry-pick [commit-hash]`**: This command is used to apply the changes introduced by some existing commits to the current branch. It's useful for applying specific commits from one branch to another.
3. **`git reflog`**: Shows a log of changes to the local repository's HEAD. It's incredibly useful for recovering from complicated situations, like a hard reset.
4. **`git reset --hard HEAD~[number]`**: Undoes commits and discards all changes. This is a destructive action and should be used with care.
5. **`git revert [commit-hash]`**: Creates a new commit that undoes the changes made in the specified commit. Unlike **`git reset`**, it doesn't alter the existing history.
6. **`git stash branch [new-branch-name]`**: Creates a new branch from your current state and applies your stashed changes to it. This is helpful when the current branch has moved on, and your stash doesn't apply cleanly anymore.
7. **`git log --graph --oneline --decorate --all`**: Displays an ASCII graph of the branch and merge history beside the log output, giving a visual representation of your commits.
8. **`git fetch --prune`**: Cleans up remote-tracking branches that no longer exist on the remote.
9. **`git remote rename [old-name] [new-name]`**: Renames a remote connection.
10. **`git worktree add [path] [branch]`**: Allows you to check out multiple branches simultaneously by creating multiple working trees connected to the same repository.
11. **`git blame [file]`**: Shows what revision and author last modified each li
